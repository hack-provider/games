<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arkanoid Game</title>
    <style>
        body { text-align: center; background: black; }
        canvas { background: #222; display: block; margin: auto; border: 2px solid white; }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>

    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        canvas.width = 800;
        canvas.height = 600;

        // Paddle properties
        const paddle = {
            width: 120,
            height: 15,
            x: (canvas.width - 120) / 2,
            y: canvas.height - 40,
            speed: 0
        };

        // Ball properties
        const ball = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            radius: 10,
            dx: 4,
            dy: -4
        };

        // Brick settings
        const brickRowCount = 5;
        const brickColumnCount = 8;
        const brickWidth = 90;
        const brickHeight = 30;
        const brickPadding = 10;
        const brickOffsetTop = 50;
        const brickOffsetLeft = 50;

        let bricks = [];
        for (let row = 0; row < brickRowCount; row++) {
            bricks[row] = [];
            for (let col = 0; col < brickColumnCount; col++) {
                bricks[row][col] = { x: 0, y: 0, status: 1 };
            }
        }

        let touchStartX = 0;

        canvas.addEventListener("touchstart", (e) => {
            touchStartX = e.touches[0].clientX;
        });

        canvas.addEventListener("touchmove", (e) => {
            let touchX = e.touches[0].clientX;
            let deltaX = touchX - touchStartX;
            paddle.x += deltaX * 0.5;
            touchStartX = touchX;

            if (paddle.x < 0) paddle.x = 0;
            if (paddle.x + paddle.width > canvas.width) paddle.x = canvas.width - paddle.width;
        });

        function drawPaddle() {
            ctx.fillStyle = "white";
            ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
        }

        function drawBall() {
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = "red";
            ctx.fill();
            ctx.closePath();
        }

        function drawBricks() {
            for (let row = 0; row < brickRowCount; row++) {
                for (let col = 0; col < brickColumnCount; col++) {
                    if (bricks[row][col].status === 1) {
                        let brickX = col * (brickWidth + brickPadding) + brickOffsetLeft;
                        let brickY = row * (brickHeight + brickPadding) + brickOffsetTop;
                        bricks[row][col].x = brickX;
                        bricks[row][col].y = brickY;
                        ctx.fillStyle = "blue";
                        ctx.fillRect(brickX, brickY, brickWidth, brickHeight);
                    }
                }
            }
        }

        function collisionDetection() {
            for (let row = 0; row < brickRowCount; row++) {
                for (let col = 0; col < brickColumnCount; col++) {
                    let brick = bricks[row][col];
                    if (brick.status === 1) {
                        if (
                            ball.x > brick.x &&
                            ball.x < brick.x + brickWidth &&
                            ball.y > brick.y &&
                            ball.y < brick.y + brickHeight
                        ) {
                            ball.dy = -ball.dy;
                            brick.status = 0;
                        }
                    }
                }
            }
        }

        function updateBall() {
            ball.x += ball.dx;
            ball.y += ball.dy;

            if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {
                ball.dx = -ball.dx;
            }
            if (ball.y - ball.radius < 0) {
                ball.dy = -ball.dy;
            }

            if (
                ball.y + ball.radius > paddle.y &&
                ball.x > paddle.x &&
                ball.x < paddle.x + paddle.width
            ) {
                ball.dy = -ball.dy;
            }

            if (ball.y + ball.radius > canvas.height) {
                alert("Game Over!");
                document.location.reload();
            }
        }

        function checkWin() {
            let allBricksBroken = bricks.flat().every(brick => brick.status === 0);
            if (allBricksBroken) {
                alert("You Win!");
                document.location.reload();
            }
        }

        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawPaddle();
            drawBall();
            drawBricks();
            collisionDetection();
            updateBall();
            checkWin();
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>
